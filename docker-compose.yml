version: '3.7'

services:
  # Hadoop master
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - 9870:9870
      - 8020:8020
    volumes:
      - ./namenode/home/${ADMIN_NAME:?err}:/home/${ADMIN_NAME:?err}
      - ./namenode/hadoop-data:/hadoop-data
      - ./namenode/entrypoint.sh:/entrypoint.sh
      - hadoop-namenode:/hadoop/dfs/name
    env_file:
      - ./hadoop.env
      - .env
    networks:
      - hadoop

  resourcemanager:
    restart: always
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    ports:
      - 8088:8088
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode1:9864"
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  # Hadoop slave 1
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    volumes:
      - hadoop-datanode-1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager1
    volumes:
      - ./nodemanagers/entrypoint.sh:/entrypoint.sh
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode1:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
      - .env
    networks:
      - hadoop

  # Hadoop slave 2
  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    volumes:
      - hadoop-datanode-2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  nodemanager2:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager2
    volumes:
      - ./nodemanagers/entrypoint.sh:/entrypoint.sh
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
      - .env
    networks:
      - hadoop

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    ports:
      - 8188:8188
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode1:9864 datanode2:9864 resourcemanager:8088"
    volumes:
      - hadoop-historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  # HUE (Management node, similar to Ambari)
  hue:
    container_name: hue
    image: gethue/hue:4.4.0
    ports:
      - 8000:8888
    env_file:
      - ./hadoop.env
    volumes:
      - ./hue/hue-overrides.ini:/usr/share/hue/desktop/conf/hue-overrides.ini
    depends_on:
      - namenode
      - resourcemanager
    networks:
      - hadoop

  hue-db:
    container_name: hue-db
    restart: always
    image: postgres:11.9
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=hue
    ports:
      - 5432:5432
    volumes:
      - hue-db:/var/lib/postgresql/data
      - ./hue-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hadoop

  # HIVE
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hiveserver
    env_file:
      - ./hadoop.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    networks:
      - hadoop

  hive-metastore:
    container_name: hivemetastore
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./hadoop.env
    command: /opt/hive/bin/hive --service metastore
    networks:
      - hadoop
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode1:9864 datanode2:9864 hive-metastore-postgresql:5432"

  hive-metastore-postgresql:
    container_name: hivedb
    image: bde2020/hive-metastore-postgresql:2.3.0
    volumes:
      - hive-metastore:/var/lib/postgresql/data
    networks:
      - hadoop

  presto-coordinator:
    container_name: presto
    image: shawnzhu/prestodb:0.181
    networks:
      - hadoop

  # Spark
  spark-master:
    image: bde2020/spark-master:3.1.1-hadoop3.2
    container_name: spark-master
    ports:
      - 8080:8080
      - 7077:7077
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  spark-worker-1:
    image:  bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - 8081:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  spark-worker-2:
    image:  bde2020/spark-worker:3.1.1-hadoop3.2
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - 8082:8081
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  # Spark notebooks
  jupyter-spark:
    # To see all running servers in this container, execute
    # `docker exec jupyter-spark jupyter notebook list`
    container_name: jupyter-spark
    build:
      context: jupyter-spark
      args:
        - SPARK_VERSION=3.1.1
        - HADOOP_VERSION=3.2
        - SPARK_CHECKSUM=E90B31E58F6D95A42900BA4D288261D71F6C19FA39C1CB71862B792D1B5564941A320227F6AB0E09D946F16B8C1969ED2DEA2A369EC8F9D2D7099189234DE1BE
        - OPENJDK_VERSION=11
        # Make sure the python version in the driver (the notebooks) is the same as in spark-master,
        # spark-worker-1, and spark-worker-2
        - PYTHON_VERSION=3.7.10
    ports:
      - 8888:8888
      - 8889:8889
      - 4040:4040
      - 4041:4041
    volumes:
      - ./jupyter-spark/work:/home/jovyan/work
      - ./jupyter-spark/drivers:/drivers
    pid: host
    environment:
      - TINI_SUBREAPER=true
    env_file:
      - ./hadoop.env
    networks:
      - hadoop

  # Mongo
  mongo:
    container_name: mongo
    image: mongo:4.4
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=kevinsuedmersen
      - MONGO_INITDB_ROOT_PASSWORD=secret
    volumes:
      - mongo_data:/data/db
      - ./mongo/mongo-data:/mongo-data
    ports:
      - 27019:27017
    networks:
      - hadoop

  mongoexpress:
    container_name: mongoexpress
    image: mongo-express:0.54
    restart: always
    ports:
      - 8091:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=kevinsuedmersen
      - ME_CONFIG_MONGODB_ADMINPASSWORD=secret
    networks:
      - hadoop
    depends_on:
      - mongo

  # neo4j graph database
  neo4j:
    container_name: neo4j
    image: neo4j:4.2
    restart: always
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      # By default, this requires you to login with neo4j/neo4j and change the password.
      # You can, for development purposes, disable authentication by setting
      - NEO4J_AUTH=none
    volumes:
      - ./neo4j/neo4j-data:/neo4j-data
      - neo4j_data:/data

networks:
  hadoop:

volumes:
  hadoop-namenode:
  hadoop-datanode-1:
  hadoop-datanode-2:
  hadoop-historyserver:
  hue-db:
  hive-metastore:
  mongo_data:
  neo4j_data:
